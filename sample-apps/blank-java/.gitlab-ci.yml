variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

image: maven:3.3.9-jdk-8  

cache:
  paths:
    - .m2/repository
    # - $CI_PROJECT_DIR/sample-apps/blank-java
    - $CI_PROJECT_DIR/sample-apps/blank-java/target

    
.java-blank:
    before_script:
        # - ls
        # - ls $CI_PROJECT_DIR
        - | 
            if [ -d "target" ] 
            then
                #cp -rf ./target  $CI_PROJECT_DIR/sample-apps/blank-java 
                echo "before_script: target directory exists"
            else
                echo "before_script: target directory does not exists."
            fi 
        - | 
            if [ -f shared-vars.sh ] 
            then
                source shared-vars.sh
                echo "before_script: shared-vars.sh file exists"
                echo $ARTIFACT_BUCKET > sample-apps/blank-java/bucket-name.txt
            else
                echo "before_script: shared-vars.sh file does not exists."
            fi 
        - cd sample-apps/blank-java
        # - echo $CI_PROJECT_DIR
    after_script:
        - cd sample-apps/blank-java
        # - ls 
        - | 
            if [ -d "target" ] 
            then
                # ls ./target/*
                cp -rf ./target  $CI_PROJECT_DIR/ 
                echo "after_script : target directory exists"
            else
                echo "after_script : target directory does not exists."
            fi 
        #- echo $CI_PROJECT_DIR
        #- ls $CI_PROJECT_DIR
        #- ls $CI_PROJECT_DIR/target/*


stages:
  - build
  - deploy
  - test
  - destroy
  
build_phase:
  extends: .java-blank
  stage: build
  script:
    # - ls
    - chmod 777 ./0-build.sh
    - ./0-build.sh
  artifacts:
    expire_in: 5 min
    paths: 
      - target/*.jar


deploy_phase:
  extends: .java-blank
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # see the note below
  stage: deploy
  script:
    - ./1-create-bucket.sh
    - ./3-deploy.sh none
    # - ls
    - ARTIFACT_BUCKET=$(cat bucket-name.txt)
    - echo "export ARTIFACT_BUCKET=$ARTIFACT_BUCKET;" >> $CI_PROJECT_DIR/shared-vars.sh
    # - ls $CI_PROJECT_DIR
    # - cat bucket-name.txt
    # - cat $CI_PROJECT_DIR/shared-vars.sh
    # - cat bucket-name.txt >> build.env
  artifacts:
    expire_in: 5 min
    paths: 
      - target/*.jar
      - shared-vars.sh

test_phase:
  extends: .java-blank
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # see the note below
  stage: test
  script:
    - ./4-invoke.sh
  artifacts:
    expire_in: 5 min
    paths: 
      - shared-vars.sh

destroy_phase:
  extends: .java-blank
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # see the note below
  stage: destroy
  script:
    - chmod 777 ./5-cleanup-yes-all.sh
    - ./5-cleanup-yes-all.sh
  #when: manual
  artifacts:
    expire_in: 5 min
    paths: 
      - shared-vars.sh

cleanup_phase:
  extends: .java-blank
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest  # see the note below
  stage: destroy
  allow_failure: true
  script:
    - chmod 777 ./5-cleanup-yes-all.sh
    - ./5-cleanup-yes-all.sh
    - rm -rf $CI_PROJECT_DIR/target
  when: on_failure
  artifacts:
    expire_in: 5 min
    paths: 
      - shared-vars.sh
